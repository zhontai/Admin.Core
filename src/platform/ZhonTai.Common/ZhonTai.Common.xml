<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZhonTai.Common</name>
    </assembly>
    <members>
        <member name="F:ZhonTai.Common.Extensions.DateTimeExtension.TimestampStart">
            <summary>
            时间戳起始日期
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Extensions.DateTimeExtension.ToTimestamp(System.DateTime,System.Boolean)">
            <summary>
            转换为时间戳
            </summary>
            <param name="dateTime"></param>
            <param name="milliseconds">是否使用毫秒</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Extensions.DateTimeExtension.GetWeekName(System.DateTime)">
            <summary>
            获取周几
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Extensions.GuidExtension.IsNull(System.Guid)">
            <summary>
            判断Guid是否为空
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Extensions.GuidExtension.NotNull(System.Guid)">
            <summary>
            判断Guid是否不为空
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Extensions.ListExtension.ToTree``1(System.Collections.Generic.List{``0},System.Func{``0,``0,System.Boolean},System.Func{``0,``0,System.Boolean},System.Action{``0,System.Collections.Generic.IEnumerable{``0}},``0)">
            <summary>
            将列表转换为树形结构
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">数据</param>
            <param name="rootWhere">根条件</param>
            <param name="childsWhere">节点条件</param>
            <param name="addChilds">添加子节点</param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Extensions.ListExtension.AddListWithChilds``1(System.Collections.Generic.List{``0},System.Func{``0,System.Collections.Generic.List{``0}},``0)">
            <summary>
            添加子级列表到平级列表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">平级列表</param>
            <param name="getChilds">获得子级列表的方法</param>
            <param name="entity">子级对象</param>
        </member>
        <member name="M:ZhonTai.Common.Extensions.ListExtension.ToPlainList``1(System.Collections.Generic.List{``0},System.Func{``0,System.Collections.Generic.List{``0}},``0)">
            <summary>
            将树形列表转换为平级列表
            tree.ToPlainList((a) => a.Children);
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="tree">树形列表</param>
            <param name="getChilds">获得子级列表的方法</param>
            <param name="entity">数据对象</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Extensions.ListExtension.Clone``1(System.Collections.Generic.List{``0})">
            <summary>
            深度克隆
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">列表</param>
            <returns></returns>
        </member>
        <member name="T:ZhonTai.Common.Extensions.UtilConvertExtension">
            <summary>
            数据类型转换
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Extensions.UtilConvertExtension.ToHex(System.Byte[],System.Boolean)">
            <summary>
            转换为16进制
            </summary>
            <param name="bytes"></param>
            <param name="lowerCase">是否小写</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Extensions.UtilConvertExtension.HexToBytes(System.String)">
            <summary>
            16进制转字节数组
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Extensions.UtilConvertExtension.ToBase64(System.Byte[])">
            <summary>
            转换为Base64
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:ZhonTai.Common.Files.FileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Files.FileInfo.#ctor(System.String,System.Int64)">
            <summary>
            初始化文件信息
            </summary>
            <param name="fileName">文件名称</param>
            <param name="size">大小</param>
        </member>
        <member name="P:ZhonTai.Common.Files.FileInfo.UploadPath">
            <summary>
            上传路径
            </summary>
        </member>
        <member name="P:ZhonTai.Common.Files.FileInfo.RequestPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:ZhonTai.Common.Files.FileInfo.RelativePath">
            <summary>
            相对路径
            </summary>
        </member>
        <member name="P:ZhonTai.Common.Files.FileInfo.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:ZhonTai.Common.Files.FileInfo.SaveName">
            <summary>
            保存名
            </summary>
        </member>
        <member name="P:ZhonTai.Common.Files.FileInfo.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:ZhonTai.Common.Files.FileInfo.Extension">
            <summary>
            扩展名
            </summary>
        </member>
        <member name="P:ZhonTai.Common.Files.FileInfo.FileDirectory">
            <summary>
            文件目录
            </summary>
        </member>
        <member name="P:ZhonTai.Common.Files.FileInfo.FileRequestPath">
            <summary>
            文件请求路径
            </summary>
        </member>
        <member name="P:ZhonTai.Common.Files.FileInfo.FileRelativePath">
            <summary>
            文件相对路径
            </summary>
        </member>
        <member name="P:ZhonTai.Common.Files.FileInfo.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="T:ZhonTai.Common.Files.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Files.FileSize.#ctor(System.Int64,ZhonTai.Common.Files.FileSizeUnit)">
            <summary>
            初始化文件大小
            </summary>
            <param name="size">文件大小</param>
            <param name="unit">文件大小单位</param>
        </member>
        <member name="P:ZhonTai.Common.Files.FileSize.Size">
            <summary>
            文件字节长度
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Files.FileSize.GetSize">
            <summary>
            获取文件大小，单位：字节
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Files.FileSize.GetSizeByK">
            <summary>
            获取文件大小，单位：K
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Files.FileSize.GetSizeByM">
            <summary>
            获取文件大小，单位：M
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Files.FileSize.GetSizeByG">
            <summary>
            获取文件大小，单位：G
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Files.FileSize.ToString">
            <summary>
            输出描述
            </summary>
        </member>
        <member name="T:ZhonTai.Common.Files.FileSizeUnit">
            <summary>
            文件大小单位
            </summary>
        </member>
        <member name="F:ZhonTai.Common.Files.FileSizeUnit.Byte">
            <summary>
            字节
            </summary>
        </member>
        <member name="F:ZhonTai.Common.Files.FileSizeUnit.K">
            <summary>
            K字节
            </summary>
        </member>
        <member name="F:ZhonTai.Common.Files.FileSizeUnit.M">
            <summary>
            M字节
            </summary>
        </member>
        <member name="F:ZhonTai.Common.Files.FileSizeUnit.G">
            <summary>
            G字节
            </summary>
        </member>
        <member name="T:ZhonTai.Common.Helpers.AESEncrypt">
            <summary>
            AES加密解密帮助类
            更多参考 https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.aes
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Helpers.AESEncrypt.EncryptStringToString(System.String,System.String)">
            <summary>
            加密ECB
            </summary>
            <param name="plainText">明文</param>
            <param name="Key">密匙</param>
            <returns>密文</returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.AESEncrypt.DecryptStringFromString(System.String,System.String)">
            <summary>
            解密ECB
            </summary>
            <param name="cipherText">密文</param>
            <param name="Key">密匙</param>
            <returns>明文</returns>
        </member>
        <member name="T:ZhonTai.Common.Helpers.ConfigHelper">
            <summary>
            配置帮助类
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Helpers.ConfigHelper.Load(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            加载配置文件
            </summary>
            <param name="fileName">文件名称</param>
            <param name="environmentName">环境名称</param>
            <param name="optional">可选</param>
            <param name="reloadOnChange">自动更新</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.ConfigHelper.Get``1(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            获得配置信息
            </summary>
            <typeparam name="T">配置信息</typeparam>
            <param name="fileName">文件名称</param>
            <param name="environmentName">环境名称</param>
            <param name="optional">可选</param>
            <param name="reloadOnChange">自动更新</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.ConfigHelper.Bind(System.String,System.Object,System.String,System.Boolean,System.Boolean)">
            <summary>
            绑定实例配置信息
            </summary>
            <param name="fileName">文件名称</param>
            <param name="instance">实例配置</param>
            <param name="environmentName">环境名称</param>
            <param name="optional">可选</param>
            <param name="reloadOnChange">自动更新</param>
        </member>
        <member name="M:ZhonTai.Common.Helpers.ConsoleHelper.WriteErrorLine(System.String,System.ConsoleColor)">
            <summary>
            打印错误信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:ZhonTai.Common.Helpers.ConsoleHelper.WriteWarningLine(System.String,System.ConsoleColor)">
            <summary>
            打印警告信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:ZhonTai.Common.Helpers.ConsoleHelper.WriteInfoLine(System.String,System.ConsoleColor)">
            <summary>
            打印正常信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:ZhonTai.Common.Helpers.ConsoleHelper.WriteSuccessLine(System.String,System.ConsoleColor)">
            <summary>
            打印成功的信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="T:ZhonTai.Common.Helpers.DataMaskHelper">
            <summary>
            数据脱敏
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Helpers.DataMaskHelper.PhoneMaskRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match a Unicode digit exactly 3 times.<br/>
            ○ Match a Unicode digit exactly 4 times.<br/>
            ○ 2nd capture group.<br/>
                ○ Match a Unicode digit exactly 4 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:ZhonTai.Common.Helpers.DataMaskHelper.EmailMaskRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Zero-width positive lookbehind.<br/>
                ○ Match a character other than '\n' exactly 2 times right-to-left.<br/>
            ○ Match a character other than '@' greedily at least once.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match a character other than '\n' exactly 2 times.<br/>
                ○ Match '@'.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:ZhonTai.Common.Helpers.DataMaskHelper.IPMaskRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match '0' through '9' atomically at least 1 and at most 3 times.<br/>
            ○ Match '.'.<br/>
            ○ 2nd capture group.<br/>
                ○ Match '0' through '9' atomically at least 1 and at most 3 times.<br/>
            ○ Match '.'.<br/>
            ○ 3rd capture group.<br/>
                ○ Match '0' through '9' atomically at least 1 and at most 3 times.<br/>
            ○ Match '.'.<br/>
            ○ 4th capture group.<br/>
                ○ Match '0' through '9' atomically at least 1 and at most 3 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:ZhonTai.Common.Helpers.DataMaskHelper.PhoneMask(System.String,System.String)">
            <summary>
            手机号脱敏
            </summary>
            <param name="input"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.DataMaskHelper.EmailMask(System.String,System.String)">
            <summary>
            邮箱脱敏
            </summary>
            <param name="input"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.DataMaskHelper.IPMask(System.String,System.String)">
            <summary>
            IP脱敏
            </summary>
            <param name="input"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="T:ZhonTai.Common.Helpers.DesEncrypt">
            <summary>
            Des加解密
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Helpers.DesEncrypt.Encrypt(System.String,System.String)">
            <summary>
            DES+Base64加密
            <para>采用ECB、PKCS7</para>
            </summary>
            <param name="encryptString">加密字符串</param>
            <param name="key">秘钥</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.DesEncrypt.Decrypt(System.String,System.String)">
            <summary>
            DES+Base64解密
            <para>采用ECB、PKCS7</para>
            </summary>
            <param name="decryptString">解密字符串</param>
            <param name="key">秘钥</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.DesEncrypt.Encrypt4Hex(System.String,System.String,System.Boolean)">
            <summary>
            DES+16进制加密
            <para>采用ECB、PKCS7</para>
            </summary>
            <param name="encryptString">加密字符串</param>
            <param name="key">秘钥</param>
            <param name="lowerCase">是否小写</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.DesEncrypt.Decrypt4Hex(System.String,System.String)">
            <summary>
            DES+16进制解密
            <para>采用ECB、PKCS7</para>
            </summary>
            <param name="decryptString">解密字符串</param>
            <param name="key">秘钥</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.DesEncrypt.Encrypt(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            DES加密
            </summary>
            <param name="encryptString"></param>
            <param name="key"></param>
            <param name="hex"></param>
            <param name="lowerCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.DesEncrypt.Decrypt(System.String,System.String,System.Boolean)">
            <summary>
            DES解密
            </summary>
            <param name="decryptString"></param>
            <param name="key"></param>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.FileHelper.WriteFile(System.String,System.String)">
            <summary>
            写文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="Strings">文件内容</param>
        </member>
        <member name="M:ZhonTai.Common.Helpers.FileHelper.WriteFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            写文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="Strings">文件内容</param>
            <param name="encode">编码格式</param>
        </member>
        <member name="M:ZhonTai.Common.Helpers.FileHelper.ReadFile(System.String)">
            <summary>
            读文件
            </summary>
            <param name="Path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.FileHelper.ReadFile(System.String,System.Text.Encoding)">
            <summary>
            读文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="encode">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.IPHelper.IsIP(System.String)">
            <summary>
            是否为ip
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.IPHelper.GetIP(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获得IP地址
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:ZhonTai.Common.Helpers.JsonHelper">
            <summary>
            Json帮助类
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Helpers.JsonHelper.Serialize``1(``0)">
            <summary>
            序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.JsonHelper.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.JsonHelper.Deserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="json">json文本</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="T:ZhonTai.Common.Helpers.MD5Encrypt">
            <summary>
            MD5加密
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Helpers.MD5Encrypt.Encrypt16(System.String,System.Boolean)">
            <summary>
            16位MD5加密
            </summary>
            <param name="password"></param>
            <param name="lowerCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.MD5Encrypt.Encrypt32(System.String,System.Boolean)">
            <summary>
            32位MD5加密
            </summary>
            <param name="password"></param>
            <param name="lowerCase"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.MD5Encrypt.Encrypt64(System.String)">
            <summary>
            64位MD5加密
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:ZhonTai.Common.Helpers.StringHelper">
            <summary>
            字符串帮助类
            </summary>
        </member>
        <member name="M:ZhonTai.Common.Helpers.StringHelper.GenerateRandom(System.Int32)">
            <summary>
            生成随机字符串，默认32位
            </summary>
            <param name="length">随机数长度</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.StringHelper.GenerateRandomNumber(System.Int32)">
            <summary>
            生成随机字符串，只包含数字
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Common.Helpers.UnicodeHelper.StringToUnicode(System.String)">
            <summary>
            字符串转Unicode码
            </summary>
            <returns>The to unicode.</returns>
            <param name="value">Value.</param>
        </member>
        <member name="M:ZhonTai.Common.Helpers.UnicodeHelper.UnicodeToString(System.String)">
            <summary>
            Unicode转字符串
            </summary>
            <returns>The to string.</returns>
            <param name="unicode">Unicode.</param>
        </member>
        <member name="M:ZhonTai.StringExtension.IsNull(System.String)">
            <summary>
            判断字符串是否为Null、空
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.StringExtension.NotNull(System.String)">
            <summary>
            判断字符串是否不为Null、空
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.StringExtension.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            与字符串进行比较，忽略大小写
            </summary>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.StringExtension.FirstCharToLower(System.String)">
            <summary>
            首字母转小写
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.StringExtension.FirstCharToUpper(System.String)">
            <summary>
            首字母转大写
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.StringExtension.ToBase64(System.String)">
            <summary>
            转为Base64，UTF-8格式
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.StringExtension.ToBase64(System.String,System.Text.Encoding)">
            <summary>
            转为Base64
            </summary>
            <param name="s"></param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PhoneMaskRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the PhoneMaskRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.PhoneMaskRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneMaskRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PhoneMaskRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneMaskRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PhoneMaskRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneMaskRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneMaskRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneMaskRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailMaskRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the EmailMaskRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.EmailMaskRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailMaskRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailMaskRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailMaskRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailMaskRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailMaskRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailMaskRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailMaskRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IPMaskRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IPMaskRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IPMaskRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IPMaskRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IPMaskRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IPMaskRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IPMaskRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IPMaskRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IPMaskRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IPMaskRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
